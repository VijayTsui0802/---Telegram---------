# PyQt6 企业级应用开发规范

## 项目结构
```
project_root/
├── gui_main.py          # 主程序
├── pyproject.toml       # Poetry 配置文件
├── poetry.lock         # Poetry 依赖锁定文件
└── README.md          # 项目说明文档
```

## 开发规范

### 1. 命名规范
- 类名：使用PascalCase
- 函数名：使用snake_case
- 变量名：使用snake_case
- 常量：使用大写SNAKE_CASE
- 私有属性/方法：使用单下划线前缀 _
- 模块名：使用小写字母，可包含下划线

### 2. 依赖管理规范
- 使用 Poetry 管理项目依赖
- 所有依赖必须在 pyproject.toml 中声明
- 提交代码时必须包含 poetry.lock
- 使用语义化版本号（^x.y.z）
- 区分开发依赖和生产依赖
- 定期更新依赖版本
- 使用 Poetry 虚拟环境

### 3. Poetry 使用规范
- 项目初始化：poetry init
- 安装依赖：poetry install
- 添加依赖：poetry add package-name
- 添加开发依赖：poetry add --group dev package-name
- 更新依赖：poetry update
- 运行命令：poetry run python gui_main.py
- 激活环境：poetry shell

### 4. 代码规范
- 遵循PEP 8规范
- 使用类型注解
- 编写文档字符串
- 保持函数单一职责
- 避免循环导入
- 限制函数长度（建议不超过50行）
- 适当添加注释

### 5. PyQt6 特定规范
- UI文件使用.ui后缀
- 使用Qt Designer设计界面
- 视图类继承自QMainWindow或QWidget
- 信号槽命名：on_[sender]_[signal]
- 使用布局管理器而非固定位置
- 分离UI逻辑和业务逻辑

### 6. 异常处理
- 自定义异常类
- 适当的异常捕获和处理
- 日志记录异常信息
- 用户友好的错误提示

### 7. 测试规范
- 使用 pytest 进行测试
- 单元测试覆盖核心功能
- 集成测试验证模块交互
- 模拟Qt事件和信号
- 测试用例命名规范：test_[功能]_[场景]

### 8. 文档规范
- 维护 README.md
- 编写接口文档
- 添加注释和文档字符串
- 记录重要决策
- 维护更新日志

### 9. 版本控制
- 使用语义化版本
- 编写清晰的提交信息
- 创建功能分支
- 进行代码审查
- 保护主分支

### 10. 性能优化
- 避免UI线程阻塞
- 使用QThread处理耗时操作
- 实现数据缓存机制
- 优化资源加载
- 定期性能分析

### 11. 安全规范
- 输入验证和清理
- 安全存储敏感数据
- 使用加密传输
- 实现访问控制
- 日志脱敏处理

### 12. 日志规范
- 使用logging模块
- 分级别记录日志
- 记录关键操作
- 定期日志轮转
- 保护敏感信息

### 13. 环境管理
- 使用 Poetry 虚拟环境
- 配置 .env 文件管理环境变量
- 区分开发和生产环境
- 统一团队 Python 版本
- 定期更新开发环境
