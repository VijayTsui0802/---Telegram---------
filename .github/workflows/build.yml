name: Build and Release

on:
  push:
    branches:
      - main  # 当推送到main分支时触发
    tags:
      - 'v*'  # 当推送v开头的tag时触发

jobs:
  build:
    runs-on: windows-latest  # 使用Windows环境

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller pillow cairosvg
        
    - name: Convert SVG to ICO
      run: |
        python -c "
        from PIL import Image
        import cairosvg
        import io
        
        # 转换SVG为PNG
        png_data = cairosvg.svg2png(url='assets/logo.svg')
        png_image = Image.open(io.BytesIO(png_data))
        
        # 创建不同尺寸的图标
        sizes = [(16,16), (32,32), (48,48), (64,64), (128,128), (256,256)]
        icons = []
        for size in sizes:
            icon = png_image.resize(size, Image.Resampling.LANCZOS)
            icons.append(icon)
            
        # 保存为ICO文件
        icons[0].save('assets/logo.ico', format='ICO', sizes=[(icon.width, icon.height) for icon in icons], append_images=icons[1:])
        "
        
    - name: Build with PyInstaller
      run: |
        pyinstaller --noconfirm --onefile --windowed --icon "assets/logo.ico" --add-data "modules;modules/" --add-data "assets;assets/" gui_main.py
        
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')  # 只在推送tag时创建Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/')  # 只在推送tag时上传Release资产
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/gui_main.exe
        asset_name: TGCloud.exe
        asset_content_type: application/octet-stream 